use ard/async
use ard/env
use ard/io
use ard/http
use ard/json

use maestro/bets
use maestro/data
use maestro/db
use maestro/leagues

let res_headers = [
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE",
  "Access-Control-Allow-Headers": "Content-Type",
  "Content-Type": "application/json"
]

fn internal_error(msg: Str) http::Response {
  // todo: need copy semantics so the map can be copied and then mutated
  // i.e. `res.headers.drop("Content-Type")`
  http::Response{
    status:500,
    body: msg,
    headers: [
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE",
      "Access-Control-Allow-Headers": "Content-Type",
    ],
  }
}

let not_found = http::Response{status:404, body:"Not found", headers:res_headers}

fn main() {
  let conn = db::init()

  // start fiber for updating db regularly
  async::start(fn() { data::sync() })

  let env_port = env::get("PORT").or("")
  let port = Int::from_str(env_port).or(3000)

  io::print("starting on port {port}")

  http::serve(
    port: port,
    handlers: [
      "/bets/overview": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Get => {
            match bets::get_overview(conn) {
              ok(data) => {
                match json::encode(data) {
                  ok(body) => http::Response{status:200, body:body, headers:res_headers},
                  err => internal_error(err)
                }
              },
              err => internal_error(err)
            }
          },
           _ => not_found
        }
      },

      "/leagues": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Get => {
            match leagues::get_all(conn) {
              ok(data) => {
                struct Res { leagues: [leagues::League] }
                match json::encode(Res{ leagues:data }) {
                  ok(body) => http::Response{status:200, body:body, headers:res_headers},
                  err => internal_error(err)
                }
              },
              err => internal_error(err)
            }
          },
           _ => not_found
        }
      },
    ],
  )
}
