use ard/env
use ard/decode
use ard/http
use ard/maybe

struct Winner {
  id: Int,
  name: Str,
  comment: Str,
}

struct Prediction {
  advice: Str?,
  winner: Winner?,
  win_or_draw: Bool?,
  home_goals: Str,
  away_goals: Str,
}

private fn decode_winner(data: decode::Dynamic) Winner![decode::Error] {
  let winner_id = try decode::run(data, decode::field("id", decode::int))
  let winner_name = try decode::run(data,  decode::field("name", decode::string))
  let winner_comment = try decode::run(data,  decode::field("comment", decode::string))

  Result::ok(Winner{
    id: winner_id,
    name: winner_name,
    comment: winner_comment,
  })
}

private fn decode_entry(data: decode::Dynamic) Prediction![decode::Error] {
  let advice = try decode::run(data, decode::field("advice", decode::nullable(decode::string)))
  let winner = try decode::run(data, decode::field("winner", decode::nullable(decode_winner)))
  let win_or_draw = try decode::run(data, decode::field("win_or_draw", decode::nullable(decode::bool)))
  let home_goals = try decode::run(data, decode::field("goals", decode::field("home", decode::string)))
  let away_goals = try decode::run(data, decode::field("goals", decode::field("away", decode::string)))


  Result::ok(Prediction{
    advice: advice,
    winner: winner,
    win_or_draw: win_or_draw,
    home_goals: home_goals,
    away_goals: away_goals,
  })
}

fn get(fixture_id: Int) Prediction!Str {
  let api_key = match env::get("API_KEY") {
    key => key,
    _ => panic("API_KEY environment variable not set")
  }
  let res = try http::send(http::Request{
    method: http::Method::Get,
    url: "https://v3.football.api-sports.io/predictions?fixture={fixture_id}",
    headers: [
      "x-rapidapi-key": api_key,
      "Accept": "application/json",
    ],
  })

  let body = decode::any(res.body)
  let predictions = try decode::run(body, decode::field("response", decode::list(decode::field("predictions", decode_entry)))) -> errs {
    Result::err(errs.at(0).to_str())
  }
  Result::ok(predictions.at(0))
}
