use ard/decode
use ard/env
use ard/http

struct Line {
  name: Str,
  odd: Int,
}

struct Stat {
  name: Str,
  values: [Line]
}

let BET_365 = 8

fn to_american(decimal_odd: Float) Int {
  match decimal_odd < 2.0 {
    true => (-100.0 / (decimal_odd - 1.0)).to_int(),
    false => ((decimal_odd - 1.0) * 100.0).to_int()
  }
}

fn int_to_string(data: decode::Dynamic) Str![decode::Error] {
  let val = try decode::as_int(data)
  Result::ok(val.to_str())
}

fn decode_line(data: decode::Dynamic) Line![decode::Error] {
  let name = try decode::run(data, decode::field("value", decode::one_of([decode::string, int_to_string])))
  let odd_str = try decode::run(data, decode::field("odd", decode::string))
  let dec_odd = Float::from_str(odd_str).or(0.0)
  let american_odd = to_american(dec_odd)

  Result::ok(Line{
    name: name,
    odd: american_odd,
  })
}

fn decode_bet(data: decode::Dynamic) Stat![decode::Error] {
  let name = try decode::run(data, decode::field("name", decode::string))
  let values = try decode::run(data, decode::field("values", decode::list(decode_line)))

  // filter out lines that aren't worth the bet
  mut juicy_lines: [Line] = []
  for l in values {
    if l.odd >= -150 {
      juicy_lines.push(l)
    }
  }

  Result::ok(Stat{
    name: name,
    values: juicy_lines,
  })
}

fn decode_bookmaker(data: decode::Dynamic) [Stat]![decode::Error] {
  let bets = try decode::run(data, decode::field("bets", decode::list(decode_bet)))
  Result::ok(bets)
}

fn decode_odds_data(data: decode::Dynamic) [Stat]![decode::Error] {
  let bookmakers = try decode::run(data, decode::list(decode::field("bookmakers", decode::list(decode_bookmaker))))
  let bet365 = bookmakers.at(0)
  let bets = bet365.at(0)

  Result::ok(bets)
}

fn get(fixture_id: Int) [Stat]!Str {
  let api_key = match env::get("API_KEY") {
    key => key,
    _ => panic("API_KEY environment variable not set")
  }
  let res = try http::send(http::Request{
    method: http::Method::Get,
    url: "https://v3.football.api-sports.io/odds?fixture={fixture_id}&bookmaker={8}",
    headers: [
      "x-rapidapi-key": api_key,
      "Accept": "application/json",
    ],
  })

  let body = decode::any(res.body)
  let stats = try decode::run(body, decode::field("response", decode_odds_data)) -> errs {
    Result::err(errs.at(0).to_str())
  }
  Result::ok(stats)
}
