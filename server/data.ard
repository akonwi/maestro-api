use ard/async
use ard/duration
use ard/http
use ard/io
use ard/sqlite

use maestro/db
use maestro/matches
use maestro/teams

// sync teams
// fn get_teams(db: sqlite::Database, leagues: [League]) {
//   for league in leagues {
//     io::print("Fetching teams for {league.name}")
//     for team in teams::fetch(league.id, 2025) {
//       match db.exists("teams", "id = {team.id}").or(false) {
//         true => {},
//         false => {
//           match db.insert("teams", team) {
//             err => io::print("Failed to insert {team.name}"),
//             ok(_) => io::print("Saved {team.name}")
//           }
//         }
//       }
//     }
//   }
// }

fn sync() {
  let conn = db::init()
  // db.exec("create table if not exists seasons (id INTEGER PRIMARY KEY, name TEXT, code TEXT)")
  //   .expect("Failed to create seasons table")
  // db.exec("create table if not exists teams (id INTEGER PRIMARY KEY, name TEXT, code TEXT, league_id INTEGER)")
  //   .expect("Failed to create teams table")
  // matches::init_db(db)

  while {
    matches::sync(conn)
    async::sleep(duration::from_hours(2))
  }

  conn.close().expect("Failed to close database")
}
