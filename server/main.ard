use ard/async
use ard/decode
use ard/io
use ard/http
use ard/json

use maestro/bets
use maestro/config
use maestro/data
use maestro/db
use maestro/leagues
use maestro/matches
use maestro/predictions
use maestro/teams

let X_API_TOKEN = "X-Api-Token"

let res_headers = [
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, {X_API_TOKEN}",
  "Content-Type": "application/json"
]

fn internal_error(msg: Str) http::Response {
  mut headers = res_headers
  headers.drop("Content-Type")
  http::Response{
    status: 500,
    body: msg,
    headers: headers,
  }
}

fn unauthorized() http::Response {
  mut headers = res_headers
  headers.drop("Content-Type")
  http::Response{
    status: 403,
    headers: headers,
    body: "",
  }
}

fn empty_200() http::Response {
  http::Response{status: 200, headers: res_headers, body: ""}
}

mut nf_headers = res_headers
nf_headers.drop("Content-Type")
let not_found = http::Response{status:404, body:"Not found", headers:nf_headers}

fn main() {
  let conn = db::connect()
  db::init(conn)

  let secret = config::api_password()
  fn is_authorized(header: Str?) Bool {
    match header {
      h => secret == h,
      _ => false
    }
  }

  // start fiber for updating db regularly
  async::start(fn() { data::sync() })
  async::start(fn () { bets::update_outcomes(conn) })

  let port = config::port()
  io::print("starting on port {port}")

  http::serve(
    port: port,
    handlers: [
      "/juice": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Get => {
            let date = req.query_param("date")
            let body = try predictions::get_juice(conn, date) -> internal_error
            http::Response{status: 200, headers: res_headers, body: body}
          },
          _ => not_found
        }
      },

      "/bets": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Get => {
            let found_result = match Int::from_str(req.query_param("match_id")) {
              match_id => bets::find_by_match(conn, match_id),
              _ => bets::get_all(conn)
            }

            let bets = try found_result -> internal_error
            struct Res { bets: [bets::Bet] }
            let body = try json::encode(Res { bets: bets }) -> internal_error
            http::Response{status: 200, headers: res_headers, body: body}
          },
          http::Method::Options => empty_200(),
          http::Method::Post => {
            match is_authorized(req.headers.get(X_API_TOKEN)) {
              false => unauthorized(),
              true => {
                let bet = try bets::create(conn, decode::json(req.body.or(""))) -> internal_error
                let body = try json::encode(bet) -> internal_error
                http::Response{status: 200, headers: res_headers, body: body}
              },
            }
          },
          _ => not_found
        }
      },

      "/bets/:id": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Del => {
            match is_authorized(req.headers.get(X_API_TOKEN)) {
              false => unauthorized(),
              true => {
                match Int::from_str(req.path_param("id")) {
                  id => {
                    try bets::delete(conn, id) -> internal_error
                    http::Response{status: 204, headers: res_headers, body: ""}
                  },
                  _ =>  not_found
                }
              }
            }
          },
          http::Method::Options => empty_200(),
          http::Method::Patch => {
            match is_authorized(req.headers.get(X_API_TOKEN)) {
              false => unauthorized(),
              true => {
                match Int::from_str(req.path_param("id")) {
                  id => {
                    try bets::update(conn, id, decode::json(req.body.or(""))) -> internal_error
                    empty_200()
                  },
                  _ => not_found
                }
              },
            }
          },
          _ => not_found
        }
      },

      "/bets/overview": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Get => {
            let overview = try bets::get_overview(conn) -> internal_error
            mut match_ids: [Int] = []
            for b in overview.bets {
              match_ids.push(b.match_id)
            }
            let teams_by_id = try teams::get_in_matches(conn, match_ids) -> internal_error
            let matches = try matches::find(conn, match_ids) -> internal_error

            // local shape of response body
            struct Res {
              overview: bets::Overview,
              teams: [Int:Str],
              matches: [matches::Match]
            }
            match json::encode(Res{ overview:overview, teams:teams_by_id, matches:matches }) {
              ok(body) => http::Response{status:200, body:body, headers:res_headers},
              err => internal_error(err)
            }
          },
           _ => not_found
        }
      },

      "/leagues": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Get => {
            let data = try leagues::get_all(conn) -> internal_error

            struct Res { leagues: [leagues::League] }
            match json::encode(Res{ leagues:data }) {
              ok(body) => http::Response{status:200, body:body, headers:res_headers},
              err => internal_error(err)
            }
          },
           _ => not_found
        }
      },

      "/leagues/:id/matches": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Get => {
            let league_id = Int::from_str(req.path_param("id")).or(-1)
            let fixtures = try matches::get_league(conn, league_id) -> internal_error
            let teams = try teams::get_all(conn) -> internal_error

            struct Res { matches: [matches::Match], teams: [teams::Team] }
            match json::encode(Res{ matches:fixtures, teams:teams }) {
              ok(body) => http::Response{status:200, body:body, headers:res_headers},
              err => internal_error(err)
            }
          },
           _ => not_found
        }
      },

      "/analysis/:matchId": fn(req: http::Request) http::Response {
        match req.method {
          http::Method::Get => {
            let fixture_id = Int::from_str(req.path_param("matchId")).or(-1)
            match fixture_id < -1 {
              true => {
                mut headers = res_headers
                headers.drop("Content-Type")
                http::Response{status: 400, body: "Invalid match id", headers: headers}
              },
              false => {
                let analysis = try predictions::get_comparison(fixture_id) -> err {
                  internal_error("Error getting analysis: {err}")
                }

                struct Res {
                  comparison: predictions::Comparison,
                }

                match json::encode(Res{ comparison: analysis }) {
                  ok(body) => http::Response{status:200, body:body, headers:res_headers},
                  err => internal_error(err)
                }
              }
            }
          },
          _ => not_found
        }
      }
    ],
  )
}
