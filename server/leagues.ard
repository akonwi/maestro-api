use ard/decode
use ard/sqlite

struct League {
  id: Int,
  name: Str,
  code: Str,
}

fn decode_league(data: Dynamic) League![decode::Error] {
  let id = try decode::run(data, decode::field("id", decode::int))
  let name = try decode::run(data, decode::field("name", decode::string))
  let code = try decode::run(data, decode::field("code", decode::string))

  Result::ok(League{
    id: id,
    name: name,
    code: code,
  })
}

fn get_all(db: sqlite::Database) [League]!Str {
  let rows = try db.query("select * from leagues order by name asc").all(["_": ()])
  mut leagues: [League] = []
  for row in rows {
    let league = try decode_league(row) -> errs {
      Result::err(errs.at(0).to_str())
    }
    leagues.push(league)
  }
  Result::ok(leagues)
}
