use ard/sqlite

struct Bet {
  id: Int,
  match_id: Int,
  name: Str,
  amount: Float,
  line: Float,
  odds: Int,
  result: Str,
}

fn get_all(db: sqlite::Database) [Bet]!Str {
  match db.get<Bet>(table: "bets", where: "") {
    err => Result::err(err),
    ok(bs) => Result::ok(bs)
  }
}

fn get_payout(bet: Bet) Float {
  // Positive odds: +150 means bet $100 to win $150
  // Negative odds: -150 means bet $150 to win $100
	match bet.odds > 0 {
	  true => bet.amount + (bet.amount * Float::from_int(bet.odds) / 100.0),
	  false => bet.amount + (bet.amount * 100.0 / Float::from_int(-bet.odds))
	}
}

struct Overview {
  bets: [Bet],
  num_pending: Int,
  total_wagered: Float,
  win_rate: Float,
  gross_payout: Float,
  net_profit:     Float,
  gross_loss:   Float,
  roi: Float,
}

// todo: most of this can be done with sql
private fn compute(bets: [Bet]) Overview {
  mut total_wagered = 0.0
  mut num_pending = 0
  mut wins = 0
  mut settled = 0
  mut gross_payout = 0.0
  mut gross_loss = 0.0

  for bet in bets {
    total_wagered =+ bet.amount
    if bet.result == "pending" {
      num_pending =+ 1
    } else {
      settled =+ 1
    }
    if bet.result == "win" {
      wins =+ 1
      gross_payout =+ get_payout(bet)
    }
    if bet.result == "lose" {
      gross_loss =+ bet.amount
    }
  }

  let net_profit = gross_payout - gross_loss
  let roi = (net_profit/total_wagered) * 100.0

  Overview{
    bets: bets,
    total_wagered: total_wagered,
    num_pending: num_pending,
    win_rate: (Float::from_int(wins) / Float::from_int(settled)) * 100.0,
    gross_payout: gross_payout,
    gross_loss: gross_loss,
    net_profit: net_profit,
    roi: roi,
  }
}

fn get_overview(db: sqlite::Database) Overview!Str {
  match get_all(db) {
    ok(bets) => Result::ok(compute(bets)),
    err => Result::err(err)
  }
}
